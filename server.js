// Require packages
const express = require('express')
const fs = require('fs')
const path = require('path')
const { createBundleRenderer } = require('vue-server-renderer')
const setupDevServer = require('./config/setup-dev-server')
const app = express()

// Set .env file to use
const { NODE_ENV } = process.env
const dotEnvPath = NODE_ENV === 'production' ? '.env' : NODE_ENV && `.env.${NODE_ENV}`
require('dotenv').config({
  path: dotEnvPath
})

// Set port
const PORT = process.env.PORT || 3000
// Check if production
const isProd = process.env.NODE_ENV === 'production'

// Create renderer function
function createRenderer (bundle, options) {
  // return the createBundleRenderer function passing in the bundle and options
  return createBundleRenderer(bundle, Object.assign(options, {
    // Create new object from the options object and add options
    runInNewContext: false // Recommended for performance
  }))
}

// Declare renderer - This will be used in other block scopes so must be defined before
let renderer
// Define readyPromise that will eventually be returned when the app is ready to render
let readyPromise
// Get template path
const templatePath = path.resolve(__dirname, './public/index.html')

// Check if production, if not start the development server
if (isProd) {
  // In production: Create server renderer using template and built server bundle
  // The server bundle is generated by vue-ssr-webpack-plugin
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional but it allows the renderer to automatically preload/prefetch links and directly add <script> tags for any async chunks during render
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot reload and create a new renderer on bundle/index template update
  readyPromise = setupDevServer(app, templatePath, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}

// Serve static files
app.use('/dist', express.static('./dist'))
app.use('/public', express.static('./public'))

// Create asynchronous render function - this will accept the req and res and is responsible for rendering the server output
async function render (req, res) {
  res.setHeader('Content-Type', 'text/html')
  try {
    // Await html content received from the renderer we created
    const html = await renderer.renderToString({ url: req.url })
    // Send html to browser for render
    res.send(html)
  } catch (err) {
    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }
}

// Accept requests to all routes that will then be matched with vue router
app.get('*', isProd
  ? render
  : (req, res) => {
      readyPromise.then(() => render(req, res))
    })

// Start server
app.listen(PORT, () => {
  console.log(`App listening on port: ${PORT}`)
})
